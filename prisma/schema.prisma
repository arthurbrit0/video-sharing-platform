// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String @unique
  studio    Media?
  firstname String?
  lastname  String?
  clerkid   String @unique
  image     String?
  trial     Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  workspace WorkSpace[]
  videos    Video[]
  subscription Subscription?
  members   Member[]
  notification Notification[]
  sender       Invite[] @relation("sender")
  reciever     Invite[] @relation("reciever")
  firstView    Boolean  @default(false)
  comment      Comment[]
}

model Comment {
  id        String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  comment      String
  reply     Comment[] @relation("reply")
  Comment   Comment? @relation("reply", fields: [commentId], references: [id])
  commentId String? @db.Uuid
  User      User?  @relation(fields: [userId], references: [id])
  userId    String? @db.Uuid
  Video     Video? @relation(fields: [videoId], references: [id])
  videoId   String? @db.Uuid
  createdAt DateTime @default(now())
}

enum SUBSCRIPTION_PLAN{
  PRO
  FREE
}

model Subscription {
  id       String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User      User?     @relation(fields: [userId], references: [id])
  plan      SUBSCRIPTION_PLAN @default(FREE)
  userId    String?   @unique @db.Uuid
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  customerId String?  @unique
}

enum PRESET {
  HD
  SD
}

model Media {
  id        String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  screen    String?
  mic       String?
  camera    String?
  preset    PRESET  @default(SD)
  userId    String? @unique @db.Uuid
  User      User?  @relation(fields: [userId], references: [id])
}

enum Type {
  PERSONAL
  PUBLIC
}

model WorkSpace {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  User      User?   @relation(fields: [userId], references: [id])
  userId    String? @db.Uuid
  type      Type
  createdAt DateTime @default(now())
  folders   Folder[]
  videos    Video[]
  members   Member[]
  invite    Invite[]
}

model Folder {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String  @default("Untitled Folder")
  createdAt DateTime @default(now())
  workspace WorkSpace? @relation(fields: [workspaceId], references: [id])
  workspaceId String? @db.Uuid
  videos    Video[]
}

model Member {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User      User?   @relation(fields: [userId], references: [id])
  userId    String? @db.Uuid
  createdAt DateTime @default(now())
  member    Boolean  @default(true)
  workspace WorkSpace? @relation(fields: [workspaceId], references: [id])
  workspaceId String? @db.Uuid
}

model Video {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title    String? @default("Untitled Video")
  description String? @default("No description")
  source   String  @unique
  createdAt DateTime @default(now())
  Folder   Folder?  @relation(fields: [folderId], references:[id], onDelete: Cascade)
  folderId String?  @db.Uuid
  User     User?    @relation(fields: [userId], references: [id])
  userId   String?  @db.Uuid
  processing Boolean @default(true)
  WorkSpace WorkSpace? @relation(fields: [workspaceId], references: [id])
  workspaceId String? @db.Uuid
  view  Int  @default(0)
  summary String?
  Comment Comment[]
}

model Notification {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User      User?   @relation(fields: [userId], references: [id])
  userId    String? @db.Uuid
  content   String
}

model Invite {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sender    User?   @relation("sender", fields: [senderId], references: [id])
  senderId  String? @db.Uuid
  reciever  User?   @relation("reciever", fields: [receiverId], references: [id])
  receiverId String? @db.Uuid
  content   String
  workspace WorkSpace? @relation(fields: [workspaceId], references: [id])
  workspaceId String? @db.Uuid
  accepted    Boolean @default(false)
}